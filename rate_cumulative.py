import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime, date, time
import collection

def get_watch_info():
    #watch_info = dict()

    # 13 PC "blue"
    #watch_info["name"]='Longines VHP PC "13" Cal L1.636.4 ETA 252.611 S/N 29206563'

    #inhib=10
    #inhib=60
    #watch_info["inhib"]=480
    #inhib=960

    #watch_info["limit"]=2.0  # VHP
    #limit=10.0 # COSC
    #limit=10.0 # PreciDrive

    # integer number of seconds watch is offset [ceil(offset)]
    #watch_info["int_seconds"]=0.0
    
    return collection.get_current_watch_info()

def read_ticks(filename="ticks.txt"):
    def generate_tick_data( filename="ticks.txt"):
        with open(filename,"r") as tick_file:
            for line in tick_file:
                field=line.strip('\n').split()
                try:
                    yield float(field[0]), float(field[4])
                except IndexError:
                    continue
                
    ticks=np.vstack( generate_tick_data( filename ) )

    # x time hacks
    # subtract start time for zero offset
    x0 = ticks[0,0]
    print ("time0: {} sec".format( x0) )

    # scale by 86400 sec/day
    tick_x=( ticks[:,0] - x0 ) / 86400.
    # y = PPS/offset data
    tick_y=watch_info["int_seconds"] + ticks[:,1]

    return tick_x, tick_y, x0

def read_offsets( filename="offset_cumulative.txt" ):
    """
    read inhibition averaged offset data generated by haqpps.py
    
    returns:
       offs_x, offs_y

       offs_x: array of time hacks in seconds, starting at 0
       offs_y: PPS offsets of watch in seconds, corrected for integer offset
    """
    # TODO: make docstring useful to someone other than me
    def generate_offset_data( filename="offset_cumulative.txt" ):
        with open(filename,"r") as offset_file:
            for line in offset_file:
                field=line.strip('\n').split(" ")
                yield float(field[0]), float(field[3])
    
    offsets=np.vstack( generate_offset_data( filename ) )

    x0 = offsets[0,0]
    print ("time0: {} sec".format( x0) )

    # x time hacks
    # subtract start time for zero offset
    # scale by 86400 sec/day
    offs_x=( offsets[:,0] - x0 ) / 86400.
    # y = PPS/offset data
    #offs_y=watch_info["int_seconds"] - offsets[:,1]
    # in offset_cumulative.txt, these are already sign corrected
    offs_y= offsets[:,1]

    return offs_x, offs_y

def calc_rate( offs_x, offs_y):
    # linear fit
    fit = np.polyfit( offs_x, offs_y, 1 )
    fit_fn = np.poly1d(fit)

    fit_x = np.array( 0.0 )
    fit_x = np.append( fit_x, offs_x)

    print ("Intercept: {:.6f} sec".format(fit[1]))

    # fit[0] holds linear-fit rate (in s/d, convert to s/y)
    spy= -1.0 * fit[0] * 365.
    print ("Rate: {} spy".format(spy))

    return fit, fit_x, fit_fn, spy

def calc_bounds( fit, offs_x, limit ):
    span=86400.0 # day
    bound=limit/((86400.0/span)*365.0) 

    # rate limits/bounds
    # fit[1] holds starting offset
    upper_bound=  bound * offs_x + fit[1]
    lower_bound= -bound * offs_x + fit[1] 

    return upper_bound, lower_bound

def plot_rate( offs_x, offs_y, fit_x, fit_fn, spy, g, h, watch_info ):
    date_str=datetime.now().strftime("%Y-%b-%d")

    fig=plt.figure()
    ax=plt.subplot(111)

    #ax.plot( tick_x, tick_y,         'r+', label='raw offsets')
    ax.plot( offs_x, offs_y,         'b*', label='inhibition ({}s) average'.format(watch_info["inhib"]))
    ax.plot( fit_x, fit_fn(fit_x),   '-g', linewidth=3,\
             label='linear fit {:+.1f} spy'.format(spy))
    ax.plot( fit_x, g,              '-k', label='{:+.1f} spy'.format( watch_info["limit"]))
    ax.plot( fit_x, h,              '-k', label='{:+.1f} spy'.format(-watch_info["limit"]))

    ax.set_title("{} ({})".format(watch_info["name"],date_str),fontsize='medium')
    
    ax.set_xlabel('time (days)')
    ax.set_ylabel('PPS offset (sec)')

    #ax.legend(loc='upper right', fontsize='small')
    ax.legend(loc='upper left', fontsize='small')
    #ax.legend(loc='best', fontsize='small')
    ax.grid()

    fig.savefig('test.png')

    plt.show()
    #plt.waitforbuttonpress()
    plt.close()

#
# Main flow
#
def main():

    global watch_info
    
    watch_info = get_watch_info()

    #tick_x, tick_y, x0 = read_ticks( "ticks.txt" )

    offs_x, offs_y = read_offsets( "offset_cumulative.txt" )

    fit, fit_x, fit_fn, spy = calc_rate( offs_x, offs_y)

    upper_bound, lower_bound = calc_bounds( fit, fit_x, watch_info["limit"] )

    plot_rate( offs_x, offs_y, fit_x, fit_fn, spy, upper_bound, lower_bound, watch_info )
    quit()
    
if __name__ == '__main__':
    main()
