main script: haqpps3.py

- I've been learning a bit of Python, so I've cleaned the code up quite a bit. I'm still learning, so I'm sure there's still a lot of improvement left to go

- improved handling of intervals as they cross seconds boundaries

example: vhp_09_2016_1110_0730_adjust03.gif shows set crossing >0 and <0, but tracks intervals and computes good inhibition averages and linear fit rate.  Not sure aboyt the lower "shadow" line of ticks. This watch is showing triple stepper pulses at 3-6 seconds past each minute (moving minutes hand? jewels need oil?), I assume that's the cause, but I don't understand the connection yet

- inhibition average offset data now logged with absolute unix time. This allows stitching files together to average sparse long term data.  TBD - automatic/manual offset of integer seconds at start of file.

- I'm almost positive the sign of the rates is wrong. I was focused on the interval between the PPS pulse and the stepper pulse. As the stepper pulse registers later and later than the PPS pulse, I report an increasing interval and a positive rate. However, this occurs when the watch is slow, and should be reported as a negative rate. This is confirmed when I regulate my Longines VHP collection. If my program shows a positive slope/rate, I need to tap the C+ terminals to increase the rate of the watch.

- TBD - I know you and I disagree on the sign of the interval from the PPS instant, which probably means you are right.  I'm currently indicating offsets of 0-1 second, and still haven't "seen the light" on what the correct measurement sense is. I think you wanted -1-0 seconds, or -0.5-0.5 seconds. That might even fix my rate sign problem

- added a graphical(Python/tkinter) utility [pps-amp.py] to plot the raw waveforms to allow adjustment of volume levels. No longer need gnuradio.

- gnuplot scripts to plot data and do linear regression fit to the inhibition averages for a "best fit" watch rate. [rate_hr.gp rate_day.gp]

- gnuplot script to plot concatenated files for sparse linear fit.  TBD better handling of integer offset seconds.  Currently done manuall with unix command 'awk'. Truly awkward :-) [rate_cumulative.gp]

example:
cp vhp_06_pc_2016_0726_0800_unadjust00-offset.txt offset_cumulative.txt
awk '{print $1 " " $2 " " $3 " " ($4 - 1)}' offset.txt >> offset_cumulative.txt
gnuplot rate_cumulative.gp

- change ($4 - 1) to give the correct offset with integer seconds to get the proper linear rate fit. This example is off by 1 second.

examples:
vhp_03_pc_2016_0719_1300_adjust03_cumulative.gif
vhp_06_pc_2016_1004_0850_unadjust00_cumulative_2016_1011_0815.gif


- prototype/learning graphical shell to run all this, but not currently useful/practical other than as a learning experience. [haqpps-tk.py]
